// <auto-generated />
using System;
using Database.Service.API.Data.FakturaData.FakturaEntities.FakturaContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Service.API.Migrations
{
    [DbContext(typeof(InvoiceContext))]
    [Migration("20190314143620_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.Service.API.Data.FakturaData.FakturaEntities.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("TypeOfDoctor");

                    b.HasKey("Id");

                    b.ToTable("Doctores");
                });

            modelBuilder.Entity("Database.Service.API.Data.FakturaData.FakturaEntities.Models.IllnessSev", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IllnessSeverity");

                    b.HasKey("Id");

                    b.ToTable("IllnessSeveritys");
                });

            modelBuilder.Entity("Database.Service.API.Data.FakturaData.FakturaEntities.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Discount");

                    b.Property<DateTime>("DueDate");

                    b.Property<DateTime>("IssueDate");

                    b.Property<Guid>("PatientJournalId");

                    b.Property<double>("TotalSum");

                    b.HasKey("Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Database.Service.API.Data.FakturaData.FakturaEntities.Models.KindOfIllness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("IllnessSeverityId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("IllnessSeverityId");

                    b.ToTable("KindOfIllnesses");
                });

            modelBuilder.Entity("Database.Service.API.Data.FakturaData.FakturaEntities.Models.MedicalService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DoctorId");

                    b.Property<DateTime>("EndTime");

                    b.Property<TimeSpan>("ExaminationDuration");

                    b.Property<double>("HourlyCost");

                    b.Property<Guid?>("InvoiceId");

                    b.Property<Guid?>("KindOfIllnesId");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("TypeOfExamination");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("KindOfIllnesId");

                    b.ToTable("MedicalServices");
                });

            modelBuilder.Entity("Database.Service.API.Data.FakturaData.FakturaEntities.Models.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<Guid?>("MedicalServiceId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("MedicalServiceId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Database.Service.API.Data.FakturaData.FakturaEntities.Models.TypeOfDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TypeOfDoctor");

                    b.HasKey("Id");

                    b.ToTable("TypeOfDoctors");
                });

            modelBuilder.Entity("Database.Service.API.Data.FakturaData.FakturaEntities.Models.TypeOfExamin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TypeOfExamination");

                    b.HasKey("Id");

                    b.ToTable("TypeOfExaminations");
                });

            modelBuilder.Entity("Database.Service.API.Data.FakturaData.FakturaEntities.Models.KindOfIllness", b =>
                {
                    b.HasOne("Database.Service.API.Data.FakturaData.FakturaEntities.Models.IllnessSev", "IllnessSeverity")
                        .WithMany()
                        .HasForeignKey("IllnessSeverityId");
                });

            modelBuilder.Entity("Database.Service.API.Data.FakturaData.FakturaEntities.Models.MedicalService", b =>
                {
                    b.HasOne("Database.Service.API.Data.FakturaData.FakturaEntities.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Database.Service.API.Data.FakturaData.FakturaEntities.Models.Invoice")
                        .WithMany("MedicalServices")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Database.Service.API.Data.FakturaData.FakturaEntities.Models.KindOfIllness", "KindOfIllnes")
                        .WithMany()
                        .HasForeignKey("KindOfIllnesId");
                });

            modelBuilder.Entity("Database.Service.API.Data.FakturaData.FakturaEntities.Models.Prescription", b =>
                {
                    b.HasOne("Database.Service.API.Data.FakturaData.FakturaEntities.Models.MedicalService")
                        .WithMany("Prescription")
                        .HasForeignKey("MedicalServiceId");
                });
#pragma warning restore 612, 618
        }
    }
}
