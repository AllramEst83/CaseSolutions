// <auto-generated />
using System;
using Database.Service.API.Data.AerendeData.AerendeEntities.AerendeContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Service.API.Migrations
{
    [DbContext(typeof(AerendeContext))]
    partial class AerendeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ResponseModels.DatabaseModels.Adress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StreetAdress");

                    b.Property<string>("Telephone");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdressId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AdressId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClinicId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int?>("TypeOfDoctorWrapperId");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("TypeOfDoctorWrapperId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.IllnessSeverityWrapper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IllnessSeverity");

                    b.HasKey("Id");

                    b.ToTable("IllnessSeverityWrapper");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.Insurance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("InsuranceCompanyId");

                    b.Property<int?>("TypeOfInsuranceWrapperId");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceCompanyId");

                    b.HasIndex("TypeOfInsuranceWrapperId");

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.InsuranceCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdressId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AdressId");

                    b.ToTable("InsuranceCompanys");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Discount");

                    b.Property<DateTime>("DueDate");

                    b.Property<DateTime>("IssueDate");

                    b.Property<Guid?>("PatientJournalId");

                    b.Property<double>("TotalSum");

                    b.HasKey("Id");

                    b.HasIndex("PatientJournalId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.KindOfIllness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("IllnessSeverityId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("IllnessSeverityId");

                    b.ToTable("KindOfIllnesses");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.MedicalService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DoctorId");

                    b.Property<DateTime>("EndTime");

                    b.Property<TimeSpan>("ExaminationDuration");

                    b.Property<double>("HourlyCost");

                    b.Property<Guid?>("KindOfIllnesId");

                    b.Property<Guid?>("PatientJournalId");

                    b.Property<DateTime>("StartTime");

                    b.Property<int?>("TypeOfExaminationWrapperId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("KindOfIllnesId");

                    b.HasIndex("PatientJournalId");

                    b.HasIndex("TypeOfExaminationWrapperId");

                    b.ToTable("MedicalServices");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdressId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("PatientJournalId");

                    b.Property<long>("SSN");

                    b.HasKey("Id");

                    b.HasIndex("AdressId");

                    b.HasIndex("PatientJournalId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.PatientJournal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AnimalSSN");

                    b.Property<Guid?>("ClinicId");

                    b.Property<string>("FirstName");

                    b.Property<Guid?>("InsuranceId");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("PatientJournals");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<Guid?>("MedicalServiceId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("MedicalServiceId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.TypeOfDoctorWrapper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TypeOfDoctor");

                    b.HasKey("Id");

                    b.ToTable("TypeOfDoctorWrapper");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.TypeOfExaminationWrapper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TypeOfExamination");

                    b.HasKey("Id");

                    b.ToTable("TypeOfExaminationWrapper");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.TypeOfInsuranceWrapper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TypeOfInsurance");

                    b.HasKey("Id");

                    b.ToTable("TypeOfInsuranceWrapper");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.Clinic", b =>
                {
                    b.HasOne("ResponseModels.DatabaseModels.Adress", "Adress")
                        .WithMany()
                        .HasForeignKey("AdressId");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.Doctor", b =>
                {
                    b.HasOne("ResponseModels.DatabaseModels.Clinic")
                        .WithMany("Doctors")
                        .HasForeignKey("ClinicId");

                    b.HasOne("ResponseModels.DatabaseModels.TypeOfDoctorWrapper", "TypeOfDoctorWrapper")
                        .WithMany()
                        .HasForeignKey("TypeOfDoctorWrapperId");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.Insurance", b =>
                {
                    b.HasOne("ResponseModels.DatabaseModels.InsuranceCompany", "InsuranceCompany")
                        .WithMany()
                        .HasForeignKey("InsuranceCompanyId");

                    b.HasOne("ResponseModels.DatabaseModels.TypeOfInsuranceWrapper", "TypeOfInsuranceWrapper")
                        .WithMany()
                        .HasForeignKey("TypeOfInsuranceWrapperId");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.InsuranceCompany", b =>
                {
                    b.HasOne("ResponseModels.DatabaseModels.Adress", "Adress")
                        .WithMany()
                        .HasForeignKey("AdressId");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.Invoice", b =>
                {
                    b.HasOne("ResponseModels.DatabaseModels.PatientJournal")
                        .WithMany("Invoices")
                        .HasForeignKey("PatientJournalId");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.KindOfIllness", b =>
                {
                    b.HasOne("ResponseModels.DatabaseModels.IllnessSeverityWrapper", "IllnessSeverity")
                        .WithMany()
                        .HasForeignKey("IllnessSeverityId");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.MedicalService", b =>
                {
                    b.HasOne("ResponseModels.DatabaseModels.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("ResponseModels.DatabaseModels.KindOfIllness", "KindOfIllnes")
                        .WithMany()
                        .HasForeignKey("KindOfIllnesId");

                    b.HasOne("ResponseModels.DatabaseModels.PatientJournal")
                        .WithMany("MedicalServices")
                        .HasForeignKey("PatientJournalId");

                    b.HasOne("ResponseModels.DatabaseModels.TypeOfExaminationWrapper", "TypeOfExaminationWrapper")
                        .WithMany()
                        .HasForeignKey("TypeOfExaminationWrapperId");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.Owner", b =>
                {
                    b.HasOne("ResponseModels.DatabaseModels.Adress", "Adress")
                        .WithMany()
                        .HasForeignKey("AdressId");

                    b.HasOne("ResponseModels.DatabaseModels.PatientJournal")
                        .WithMany("Owners")
                        .HasForeignKey("PatientJournalId");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.PatientJournal", b =>
                {
                    b.HasOne("ResponseModels.DatabaseModels.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId");

                    b.HasOne("ResponseModels.DatabaseModels.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId");
                });

            modelBuilder.Entity("ResponseModels.DatabaseModels.Prescription", b =>
                {
                    b.HasOne("ResponseModels.DatabaseModels.MedicalService")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicalServiceId");
                });
#pragma warning restore 612, 618
        }
    }
}
